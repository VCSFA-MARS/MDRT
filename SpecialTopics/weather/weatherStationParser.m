% weatherStationParser
%
% Reads files generated by Walter Taraila's script. Sample script output is
% included below.
%
% Translates values from XML output to correct scaling and assembles the
% data into discrete FD variabls and files for use in MDRT.
%

%     11-10-17-14:10:50 - Weather script starting NOW.
%     172.16.0.35 == (#1-NORTH) && 172.16.0.105 == (#2-SOUTH)
% 
% 
%     11-10-17-14:10:50: BAROMETER #1:
%     <xml device="KTA-282" firmwareversion="108"><modbusregisters><register id="4"><value>30193</value></register></modbusregisters></xml>
%     11-10-17-14:10:50: BAROMETER #2:
%     <xml device="KTA-282" firmwareversion="108"><modbusregisters><register id="4"><value>30177</value></register></modbusregisters></xml>
%     11-10-17-14:10:50: TEMPERATURE #1:
%     <xml device="KTA-282" firmwareversion="108"><modbusregisters><register id="5"><value>626</value></register></modbusregisters></xml>

%% Constant definitions: 

timesAreUTC = false;

%% Selecting a file:

    [filename, pathname, filterindex] = uigetfile('*.*', 'Pick a file');
    [outputPath] = uigetdir;

%% File handling
    fid = fopen(fullfile(pathname, filename));

%% Grab the entire contents of the file as a cell array of strings.
%   Each line of the file is it's own "row" in the cell array

    t = textscan(fid, '%s', 'delimiter', '\n');

%% File Handling - clean up your mess!

    fclose(fid);

%% Find the index of all lines containing a <value></value> pair.
%   By using valid <value></value> pairs as the line indices, it should
%   eliminate error cases where a timestamp for a query was recorded, but
%   the query timed out and nothing was written to the log file for that
%   timestamp.

    Index  = strfind(t{1}, '<value>');
    IndexV = find(not(cellfun('isempty', Index))); % Which cells have value
    
    % The datestamp is the previous line, from file structure.
    IndexD = IndexV - 1; % Which cells have dates for the above value

%% 

    % Date String
    t{1}{IndexD(1)}(1:17)

    % Instrument Name
    t{1}{IndexD(1)}(19:end-1)

%% Search for string between "><value>     and </value>
    
    % Find the boundaries of the recorded value by grabbing the text
    % between the XML tags
    vStart = strfind(t{1}{IndexV(1)}, '"><value>') + 9;
    vEnd = strfind(t{1}{IndexV(1)}, '</value>') - 1;

    % Prealloc cells:
    value       = cell(length(IndexD), 1);
    dateStr     = cell(length(IndexD), 1);
    instName    = cell(length(IndexD), 1);
    
for i = 1:length(IndexD)
    
    % Value - Find the boundaries of the recorded value by grabbing the 
    % text between the XML tags
    vStart          = strfind(t{1}{IndexV(i)}, '"><value>') + 9;
    vEnd            = strfind(t{1}{IndexV(i)}, '</value>') - 1;
    
    value{i,1}      = t{1}{IndexV(i)}(vStart:vEnd);
    
    % Date String
    dateStr{i,1}    = t{1}{IndexD(i)}(1:17);

    % Instrument Name
    instName{i,1}   = t{1}{IndexD(i)}(19:end-1);
    
end

%% Turn into usable variables

    values      = cellfun(@str2num,value);
    dateValues  = datenum(dateStr);
    instName    = strtrim(instName);
    
%%
    
    instruments = unique(instName);
    
    % Loop through each instrument name
    for i = 1:length(instruments)    
        
        % Get the logical index of all records for instrument i
        instIndex = ~cellfun('isempty',strfind(instName, instruments{i}));
        
        fd = newFD;
        
        % Make Name / Instrument Tag
        switch instruments{i}(end-1:end)
            case '#1'
                % North Weather Station
                Type = 'WSN';
                FullType = 'PAD0A WSN';
            case '#2'
                % South Weather Station
                Type = 'WSS';
                FullType = 'PAD0A WSS';
            otherwise
                Type = 'Unknown';
                FullType = 'PAD0A Unknown';
        end
        
        % Make Value Vector for FD
        
        %Scale values according to which instrument
        
        switch instruments{i}
            case {'BAROMETER #1','BAROMETER #2'}
                % Barometer = Register 4 = 0.001x multiplier
                fdValue = values(instIndex) * 0.001;
                
                ID = 'Press';
                
            case {'TEMPERATURE #1',  'TEMPERATURE #2'}
                % Temperature = Register 5 = 0.1x multiplier
                fdValue = values(instIndex) * 0.1;
                
                ID = 'Temp';
                
            case {'WIND DIR #1',     'WIND DIR #2'}
                % Wind Direction = Register 10 = 1x multiplier
                fdValue = values(instIndex);
                
                ID = 'Wind Dir';
                
            case {'WIND SPEED #1',   'WIND SPEED #2'}
                % Wind Speed = Register 8 = 1x multiplier
                fdValue = values(instIndex);
                
                ID = 'Wind Spd';
                
            otherwise
                ID = 'Unknown';
                fdValue = values(instIndex);
        end
        
        
        % Make Time Vector for FD
        if ~timesAreUTC
            % Convert times
        end
        
        
        % Make Timeseries for FD Structure
        
        ts = timeseries(fdValue, dateValues(instIndex), 'Name', ...
                        strjoin({FullType, ID, 'Sensor'}));
        
        fd.ts = ts;
        fd.FullString = strjoin({FullType, ID, 'Sensor'});
        fd.ID = ID;
        fd.isValve = false;
        fd.System = 'PAD0A';
        fd.Type = Type
        
        makeFileNameForFD(fd)
        
        save(fullfile(outputPath, makeFileNameForFD(fd)),'fd');
        
    end
    
    
    
    

